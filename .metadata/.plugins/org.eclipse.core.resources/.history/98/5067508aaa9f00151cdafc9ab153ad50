package org.soen387.domain.model.notification.inputmapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.dsrg.soenea.domain.MapperException;
import org.dsrg.soenea.domain.mapper.DomainObjectNotFoundException;
import org.dsrg.soenea.domain.mapper.IdentityMap;
import org.dsrg.soenea.uow.MissingMappingException;
import org.dsrg.soenea.uow.UoW;
import org.soen387.domain.model.notification.INotification;
import org.soen387.domain.model.notification.Notification;
import org.soen387.domain.model.notification.NotificationFactory;
import org.soen387.domain.model.notification.finder.NotificationFinder;
import org.soen387.domain.model.player.PlayerProxy;

public class NotificationInputMapper {
	public static Notification find(long id) throws SQLException,
			MissingMappingException, MapperException {

		Notification n = IdentityMap.get(id, Notification.class);

		if (n != null) {
			return n;
		}

		ResultSet rs = NotificationFinder.find(id);
		if (rs.next()) {
			n = buildNotification(rs);
			rs.close();
			UoW.getCurrent().registerClean(n);
			return n;
		}
		throw new DomainObjectNotFoundException(
				"Could not create a notification with id \"" + id + "\"");
	}

	public static List<INotification> findAll() throws MapperException {
		try {
			ResultSet rs = NotificationFinder.findAll();
			return buildCollection(rs);
		} catch (SQLException e) {
			throw new MapperException(e);
		}
	}
	
	public static List<INotification> buildCollection(ResultSet rs)
			throws SQLException, MissingMappingException, MapperException {
		ArrayList<INotification> l = new ArrayList<INotification>();
		while (rs.next()) {
			long id = rs.getLong("id");
			Notification n = null;
			
			if (IdentityMap.has(id, Notification.class)) {
				n = IdentityMap.get(id, Notification.class);
			} else {
				n = buildNotification(rs);
				UoW.getCurrent().registerClean(n);
			}
			l.add(n);
		}
		return l;
	}

	private static Notification buildNotification(ResultSet rs)
			throws SQLException, MissingMappingException, MapperException {
		return NotificationFactory.createClean(rs.getLong("id"), 
				rs.getLong("version"), new PlayerProxy(rs.getLong("recipient")),
				rs.getBoolean("seen"));
	}
}