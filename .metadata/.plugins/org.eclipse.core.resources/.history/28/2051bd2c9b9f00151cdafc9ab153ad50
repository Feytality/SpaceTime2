package org.soen387.domain.model.pilot.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.dsrg.soenea.domain.MapperException;
import org.dsrg.soenea.domain.ObjectRemovedException;
import org.dsrg.soenea.domain.mapper.DomainObjectNotFoundException;
import org.dsrg.soenea.domain.mapper.IdentityMap;
import org.dsrg.soenea.domain.mapper.LostUpdateException;
import org.dsrg.soenea.uow.UoW;
import org.soen387.domain.model.pilot.IPilot;
import org.soen387.domain.model.pilot.Pilot;
import org.soen387.domain.model.pilot.tdg.PilotTDG;
import org.soen387.domain.model.player.PlayerProxy;

public class PilotOutputMapper {
	
	public static Pilot find(long id) throws SQLException, DomainObjectNotFoundException, ObjectRemovedException {
		Pilot p = IdentityMap.get(id, Pilot.class);
		if(p!=null) return p;
		
		ResultSet rs = PilotTDG.find(id);
		if(rs.next()) {
			p = buildPilot(rs);
			rs.close();
			UoW.getCurrent().registerClean(p);
			return p;
		}
		throw new DomainObjectNotFoundException("Could not create a Player with id \""+id+"\"");
	}
	
	public static Pilot find(IPilot u) throws SQLException, DomainObjectNotFoundException {
		ResultSet rs = PilotFinder.findByUser(u.getId());
		if(rs.next()) {
			long id = rs.getLong("id");
			Pilot p = IM.get().get(id);
			if(p!=null) return p;
			p = buildPilot(rs);
			rs.close();
			IM.get().put(id, p);
			return p;
		}
		throw new DomainObjectNotFoundException("Could not create a Player from User with id \""+u.getId()+"\"");
	}

	public static List<IPilot> buildCollection(ResultSet rs)
		    throws SQLException {
		    ArrayList<IPilot> l = new ArrayList<IPilot>();
		    while(rs.next()) {
		    	long id = rs.getLong("id");
		    	Pilot c = IM.get().get(id);
		    	if(c == null) {
		    		c = buildPilot(rs);
		    		IM.get().put(id, c);
		    	}
		    	l.add(c);
		    }
		    return l;
		}

	public static List<IPilot> findAll() throws MapperException {
        try {
            ResultSet rs = PilotTDG.findAll();
            return buildCollection(rs);
        } catch (SQLException e) {
            throw new MapperException(e);
        }
	}
	
	private static Pilot buildPilot(ResultSet rs) throws SQLException  {
		return new Pilot(rs.getLong("id"),
				rs.getInt("version"),
				rs.getString("name"),
				new PlayerProxy(rs.getLong("player"))
				);
	}

}
